package housekeeper.bd.com.housekeeper.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import housekeeper.bd.com.housekeeper.db.Bill;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BILL".
*/
public class BillDao extends AbstractDao<Bill, Long> {

    public static final String TABLENAME = "BILL";

    /**
     * Properties of entity Bill.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Create_time = new Property(1, Long.class, "create_time", false, "CREATE_TIME");
        public final static Property Total_money = new Property(2, Float.class, "total_money", false, "TOTAL_MONEY");
        public final static Property Record_list = new Property(3, String.class, "record_list", false, "RECORD_LIST");
        public final static Property Status = new Property(4, Boolean.class, "status", false, "STATUS");
    };


    public BillDao(DaoConfig config) {
        super(config);
    }
    
    public BillDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BILL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CREATE_TIME\" INTEGER," + // 1: create_time
                "\"TOTAL_MONEY\" REAL," + // 2: total_money
                "\"RECORD_LIST\" TEXT," + // 3: record_list
                "\"STATUS\" INTEGER);"); // 4: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BILL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Bill entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindLong(2, create_time);
        }
 
        Float total_money = entity.getTotal_money();
        if (total_money != null) {
            stmt.bindDouble(3, total_money);
        }
 
        String record_list = entity.getRecord_list();
        if (record_list != null) {
            stmt.bindString(4, record_list);
        }
 
        Boolean status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(5, status ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Bill readEntity(Cursor cursor, int offset) {
        Bill entity = new Bill( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // create_time
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // total_money
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // record_list
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0 // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Bill entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCreate_time(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTotal_money(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setRecord_list(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStatus(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Bill entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Bill entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
