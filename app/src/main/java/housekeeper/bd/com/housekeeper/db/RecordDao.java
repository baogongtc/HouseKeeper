package housekeeper.bd.com.housekeeper.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import housekeeper.bd.com.housekeeper.db.Record;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORD".
*/
public class RecordDao extends AbstractDao<Record, Long> {

    public static final String TABLENAME = "RECORD";

    /**
     * Properties of entity Record.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Create_time = new Property(1, Long.class, "create_time", false, "CREATE_TIME");
        public final static Property Category = new Property(2, Integer.class, "category", false, "CATEGORY");
        public final static Property Money = new Property(3, Float.class, "money", false, "MONEY");
        public final static Property Owner = new Property(4, String.class, "owner", false, "OWNER");
    };


    public RecordDao(DaoConfig config) {
        super(config);
    }
    
    public RecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CREATE_TIME\" INTEGER," + // 1: create_time
                "\"CATEGORY\" INTEGER," + // 2: category
                "\"MONEY\" REAL," + // 3: money
                "\"OWNER\" TEXT);"); // 4: owner
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Record entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindLong(2, create_time);
        }
 
        Integer category = entity.getCategory();
        if (category != null) {
            stmt.bindLong(3, category);
        }
 
        Float money = entity.getMoney();
        if (money != null) {
            stmt.bindDouble(4, money);
        }
 
        String owner = entity.getOwner();
        if (owner != null) {
            stmt.bindString(5, owner);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Record readEntity(Cursor cursor, int offset) {
        Record entity = new Record( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // create_time
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // category
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // money
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // owner
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Record entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCreate_time(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCategory(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setMoney(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setOwner(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Record entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Record entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
